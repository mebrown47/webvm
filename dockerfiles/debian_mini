# RTL-SDR customized WebVM image (i386)
FROM --platform=linux/386 i386/debian:bookworm-slim

ARG DEBIAN_FRONTEND=noninteractive
ENV HOME=/home/user LANG=en_US.UTF-8 LC_ALL=C TERM=xterm SHELL=/bin/bash USER=user EDITOR=vim

# Basic apt setup, install runtime + build deps we actually need
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-utils \
        ca-certificates \
        gnupg \
        wget \
        curl \
        lsb-release \
        vim \
        nano \
        sudo \
        procps \
        htop \
        net-tools \
        dnsutils \
        # python & build basics (we prefer Debian wheels so no heavy pip builds)
        python3 \
        python3-pip \
        python3-dev \
        python3-setuptools \
        python3-wheel \
        python3-numpy \
        python3-scipy \
        python3-matplotlib \
        python3-pyrtlsdr \
        build-essential \
        libffi-dev \
        libssl-dev \
        pkg-config \
        # RTL-SDR / gnuradio tools
        rtl-sdr \
        librtlsdr-dev \
        gnuradio \
        gnuradio-dev \
        gqrx-sdr \
        multimon-ng \
        dump1090-mutability \
        sox \
        # NodeJS runtime - use Debian's package (Bookworm has Node >= 18?), adjust if you need a newer Node
        nodejs \
        npm \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -s /bin/bash user && echo "user:password" | chpasswd && adduser user sudo
WORKDIR /home/user

# Small welcome script
RUN printf '%s\n' '#!/bin/bash' \
    'echo "=== RTL-SDR WebVM Environment ==="' \
    'echo "Available SDR tools: rtl_test, rtl_fm, rtl_power, dump1090, gqrx"' \
    'echo "ðŸ”Œ Connect RTL-SDR dongle and grant browser USB access"' \
    'echo "ðŸ§ª Try: rtl_test -t"' > /usr/local/bin/sdr-welcome \
    && chmod +x /usr/local/bin/sdr-welcome \
    && echo 'sdr-welcome' >> /home/user/.bashrc

# Make sure npm uses a project-local install in CI builds (optional)
# Copy only package files first to leverage Docker cache for npm install
USER user
COPY --chown=user:user package.json package-lock.json* ./

RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; else npm install --no-audit --no-fund; fi

# Copy remaining project files and run build
COPY --chown=user:user . .
RUN npm run build

# Final defaults
ENV PATH="/home/user/.local/bin:${PATH}"
CMD ["/bin/bash"]
